Install and use Chat SDK
This article walks you through the installation and usage of the Coze Chat SDK. Developers can use this guide to add an AI app to their custom websites, integrating AI-empowered chat services.​
Prerequisites​
Obtain an access token for authentication and authorization of the Chat SDK.​
Experience or debugging scenarios: We recommend that developers generate a short-term Personal Access Token (PAT). This will allow you to quickly go through the entire process of using the Chat SDK.​
Add a new token on the authorization page and assign the required permissions.​
​
​​

​
​
Production environment: You must use the OAuth authentication for your application deployed in the production environment. For more information about the OAuth authentication, see ​OAuth authorization overview.​
​
Create an OAuth App and grant authorization according to the authentication mode. For the list of permissions required for using the Chat SDK, see ​Permission requirements.​
​
​​

​
​
Permission requirements​
Authenticate OpenAPI through Coze access tokens, supporting Personal Access Tokens (PAT) and standard OAuth access tokens. For the differences between the two types of access tokens, see ​Authentication methods. For integrated third-party channels, you can also use the OAuth access token applied by the channel for authentication. For information about how to apply the OAuth access token for channels, see ​Channel integration overview.​
To utilize the capabilities of the Chat SDK, access tokens must be granted with the specified permissions. The list of permissions required for the Chat SDK is as follows:​
​
​
Configure the Web SDK​
Step 1: publish the agent or AI app​
On the publish page of the agent or AI app, select Chat SDK and click Publish. For more information about how to publish an agent or application, see:​
​Publish agent as Chat SDK​
​Publish app as Chat SDK​
Step 2: Get the source code for installation​
Go to the Publish page to copy the source code of Web SDK for installation.​
​
Step 2: Install the Web SDK​
You can directly load the Chat SDK's JavaScript code on the page using the <script> tag and paste the installation code copied in Step 1 into the <body> section of the webpage.​
An example of the installation code copied in Step 1 is as follows:​
​
Step 3: Configure the chatbox​
After installing the Chat SDK, you can now initialize the client. Create the chatbox by calling CozeWebSDK.WebChatClient in the page. The current page's chatbox provides layouts for both PC and mobile devices. On the PC client, the chatbox is located at the bottom right corner of the page, while on the mobile device, the chatbox will occupy the full screen.​
Agent settings​
When calling CozeWebSDK.WebChatClient, you need to configure the following parameters:​
Config: A required parameter, representing the agent configuration.​
The required parameters for the agent are as follows:​
​
auth: An optional parameter, which indicates the authentication method. If this parameter is not configured, no authentication is required. If authentication is required, you can set the type to token and specify the access token for the token. During debugging, we recommended setting the token to the PAT obtained in the prerequisites section.​
Examples are as follows:​
​
Coze app settings​
When calling CozeWebSDK.WebChatClient, you need to configure the following parameters:​
config: Required, representing the app configuration.​
The required parameters for the app are as follows:​
​
​
auth: An optional parameter, which indicates the authentication method. If this parameter is not configured, no authentication is required. If authentication is required, you can set the type to token and specify the access token for the token. During debugging, we recommended setting the token to the PAT obtained in the prerequisites section.​
Examples are as follows:​
​
Step 4: Configure attributes​
The Coze Chat SDK offers extensive attribute configurations, allowing developers to tailor various display aspects of the dialogue box. These include customizing user information for display, dialogue box UI effects, floating ball, and bottom text.​
You can add various attributes to the WebChatClient method to produce specific effects. The currently supported attributes are as follows:​
​
Step 5: Destroy the client​
You can implement a destroy method to terminate the client.​
​
Attribute configuration​
Agent or app settings​
The config parameter is used to specify the agent. You need to specify the botId in the parameter, which is the agent's ID obtained from the URL in the agent build page in Step 1.​
The required parameters for the agent are as follows:​
​
The required parameters for the Coze app are as follows:​
​
Authentication​
The auth attribute is used to configure the authentication method. If this parameter is not included, it indicates that no authentication is used. Alternatively, you can specify PAT or OAuth authentication using this parameter. The configuration is as follows:​
​
Using PAT authentication as an example, the authentication is configured as follows:​
​
Using OAuth authentication as an example, the authentication is configured as follows:​
​
User information​
The userInfo parameter specifies user information displayed in the chatbox, including user avatar and username. At the same time, the specified user ID will be transmitted to the Coze server via the API when initiating the chat.​
​
The configuration example is as follows:​
​
UI effects​
The ui.base parameter is used to add overall UI effects for the chatbox, including app icons, page display mode, language attributes, and more.​
​
The example code is as follows:​
​
Floating ball​
The asstBtn parameter controls whether to display the floating ball at the bottom right corner of the page. The floating ball is displayed by default. A chat window will pop up when users click the floating ball.​
​
​​

​
​
If you choose not to display the floating ball, you can use the following methods to control the visibility of the chatbox​
Show the chatbox: cozeWebSDK.showChatBot()​
Hide the chatbox: cozeWebSDK.hideChatBot()​
​
For example, to hide the floating ball, you can use the following code:​
​
When the floating ball is not displayed, you can control the visibility of the chatbox using the following methods.​
​
Bottom text​
The chat box's bottom section will display the information of the chat service provider, using Powered by coze by default. .AI-generated content for reference only. Developers can hide this text or change it to other text through the footer parameter, and adding hyperlinks to the text is also supported.​
The default display effect of the bottom text is as follows:​
​
​​

​
​
The configuration for the footer parameter is as follows:​
​
The configuration example is as follows:​
​
The corresponding display effect of this configuration is as follows:​
​
​​

​
​
Top title bar​
The top of the chat box displays the agent name, icon, and close button by default. The display effect is similar to the following:​
​
​​

​
​
​
You can configure whether to display the top title bar and the close button via the header parameter. The configuration instructions for the header parameter are as follows:​
​
The code example is as follows:​
​
Chatbox​
The chatBot parameter controls the UI and basic capabilities of the chatbox, including basic attributes such as title, size, and position. Additionally, it can specify whether file upload is supported in the chatbox. This parameter also provides multiple callback methods for synchronizing chatbox events such as display and hide notifications.​
The configuration is as follows:​
​
Related callbacks:​
onHide: This method is called when the chat box is hidden.​
onShow: This method is called when the chat box is displayed.​
onBeforeShow: This method is called before the chat box is displayed. If it returns false, the chat box will not be displayed. The callback supports asynchronous operations.​
onBeforeHide: This method is called before the chat box is hidden. If it returns false, the chat box will not be hidden. The callback supports asynchronous operations.​
In the following example, the chatbox title is Kids' Playmate | Snowy, and the file upload feature is enabled.​
​
​​

​
​
The code example is as follows:​
​
Below is the sample code for configuring the component using the el parameter of the chatbot:​
​
Related operations​
Update the SDK version​
The Coze Chat SDK will undergo continuous updates and iterations, enhancing its support for rich chat functionalities and display features. To experience and utilize the latest chat features of the Chat SDK, you can specify the latest version number of the Chat SDK in the script tag.​
In the following code, replace the {{version}} placeholder with the latest version number of the Chat SDK. You can view the latest version number in ​View release history.​
​
Unpublish Chat SDK​
If you no longer need to use AI apps through the Chat SDK, you can click the Disconnect button on the publish page. Once Disconnect, the agent or app will no longer be accessible through the integrated web application. To restore access to the web application, republish the agent or app as Chat SDK.​
​
Example​
Below is a complete code example demonstrating how to use an agent using the Chat SDK.​
​
<!doctype html>​
<html lang="en">​
<head>​
    <style>​
        /* Customize the position of the floating entrance */​
        #position_demo {​
            position: absolute;​
            right: 10px;​
            bottom: 20px;​
        }​
    </style>​
</head>​
<body>​
<h1>Hello World</h1>​
<div id="position_demo"></div>​
    <script src="https://lf-cdn.coze.cn/obj/unpkg/flow-platform/chat-app-sdk/1.0.0-beta.4/libs/cn/index.js"></script>​
    <script>​
    const cozeWebSDK = new CozeWebSDK.WebChatClient({​
  config: {​
      // Agent ID​
    botId: '742477211246629****',​
  },​
  auth:  {​
      // Authentication methods, the default type is 'unauth', which means no authentication is required; it is recommended to set it to 'token', indicating authentication through PAT (Personal Access Token) or OAuth.​
    type: 'token',    ​
     // When the type is set to 'token', it is necessary to configure a PAT (Personal Access Token) or OAuth access token for authentication.​
    token: 'pat_82GrrdfNWPMnlcY58r98Rzqiev2s5NyrqCR8Ypbh5hOomzZN4ivb325PZAd****',​
    // When the access token expires, use a new token and set it as needed.​
    onRefreshToken: () => 'pat_82GrrdfNWPMnlcY58r98Rzqiev2s5NyrqCR8Ypbh5hOomzZN4ivb325PZAdZ****',​
  },ui:{​
      chatBot: {​
        title: "Intelligent Customer Service",​
        uploadable: true​
      }}​
});​
</script>​
</body>​
</html>